// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: internal/user/infra/proto/user.proto

package user_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserUseCaseClient is the client API for UserUseCase service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserUseCaseClient interface {
	Save(ctx context.Context, in *User, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Get(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*User, error)
	Update(ctx context.Context, in *User, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type userUseCaseClient struct {
	cc grpc.ClientConnInterface
}

func NewUserUseCaseClient(cc grpc.ClientConnInterface) UserUseCaseClient {
	return &userUseCaseClient{cc}
}

func (c *userUseCaseClient) Save(ctx context.Context, in *User, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.UserUseCase/Save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUseCaseClient) Get(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/user.UserUseCase/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUseCaseClient) Update(ctx context.Context, in *User, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.UserUseCase/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUseCaseClient) Delete(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.UserUseCase/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserUseCaseServer is the server API for UserUseCase service.
// All implementations must embed UnimplementedUserUseCaseServer
// for forward compatibility
type UserUseCaseServer interface {
	Save(context.Context, *User) (*emptypb.Empty, error)
	Get(context.Context, *UserID) (*User, error)
	Update(context.Context, *User) (*emptypb.Empty, error)
	Delete(context.Context, *UserID) (*emptypb.Empty, error)
	mustEmbedUnimplementedUserUseCaseServer()
}

// UnimplementedUserUseCaseServer must be embedded to have forward compatible implementations.
type UnimplementedUserUseCaseServer struct {
}

func (UnimplementedUserUseCaseServer) Save(context.Context, *User) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedUserUseCaseServer) Get(context.Context, *UserID) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedUserUseCaseServer) Update(context.Context, *User) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUserUseCaseServer) Delete(context.Context, *UserID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUserUseCaseServer) mustEmbedUnimplementedUserUseCaseServer() {}

// UnsafeUserUseCaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserUseCaseServer will
// result in compilation errors.
type UnsafeUserUseCaseServer interface {
	mustEmbedUnimplementedUserUseCaseServer()
}

func RegisterUserUseCaseServer(s grpc.ServiceRegistrar, srv UserUseCaseServer) {
	s.RegisterService(&UserUseCase_ServiceDesc, srv)
}

func _UserUseCase_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUseCaseServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserUseCase/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUseCaseServer).Save(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUseCase_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUseCaseServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserUseCase/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUseCaseServer).Get(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUseCase_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUseCaseServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserUseCase/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUseCaseServer).Update(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUseCase_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUseCaseServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserUseCase/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUseCaseServer).Delete(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

// UserUseCase_ServiceDesc is the grpc.ServiceDesc for UserUseCase service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserUseCase_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserUseCase",
	HandlerType: (*UserUseCaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _UserUseCase_Save_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _UserUseCase_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UserUseCase_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserUseCase_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/user/infra/proto/user.proto",
}
